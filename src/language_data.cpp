#include "language_data.h"
#include <fstream>
#include <sstream>
#include <cstring>
#include <vector>

using namespace std;

namespace LanguageData
{	
	double EnglishIoC = 0.0665;
	double EnglishDIoC = 0.0075;
	double EnglishChi2 = 0.55;
	double EnglishEntropy = 4.1;
	
	CharToDoubleMap expectedLetters = {
		{'A', 0.08167},
		{'B', 0.01492},
		{'C', 0.02782},
		{'D', 0.04253},
		{'E', 0.12702},
		{'F', 0.02228},
		{'G', 0.02015},
		{'H', 0.06094},
		{'I', 0.06966},
		{'J', 0.00153},
		{'K', 0.00772},
		{'L', 0.04025},
		{'M', 0.02406},
		{'N', 0.06749},
		{'O', 0.07507},
		{'P', 0.01929},
		{'Q', 0.00095},
		{'R', 0.05987},
		{'S', 0.06327},
		{'T', 0.09056},
		{'U', 0.02758},
		{'V', 0.00978},
		{'W', 0.02360},
		{'X', 0.00150},
		{'Y', 0.01974},
		{'Z', 0.00074}
	};
	
	std::unordered_map<int, int> expectedBigrams = {
	  {0, 69},
	  {1, 95},
	  {2, 101},
	  {3, 104},
	  {4, 62},
	  {5, 89},
	  {6, 95},
	  {7, 79},
	  {8, 102},
	  {9, 63},
	  {10, 90},
	  {11, 107},
	  {12, 98},
	  {13, 117},
	  {14, 64},
	  {15, 96},
	  {16, 60},
	  {17, 110},
	  {18, 111},
	  {19, 113},
	  {20, 91},
	  {21, 97},
	  {22, 90},
	  {23, 55},
	  {24, 96},
	  {25, 70},
	  {26, 91},
	  {27, 68},
	  {28, 36},
	  {29, 45},
	  {30, 105},
	  {31, 32},
	  {32, 23},
	  {33, 51},
	  {34, 82},
	  {35, 65},
	  {36, 6},
	  {37, 95},
	  {38, 52},
	  {39, 39},
	  {40, 94},
	  {41, 24},
	  {43, 89},
	  {44, 75},
	  {45, 68},
	  {46, 96},
	  {47, 46},
	  {48, 45},
	  {50, 89},
	  {52, 99},
	  {53, 46},
	  {54, 82},
	  {55, 48},
	  {56, 103},
	  {57, 47},
	  {58, 40},
	  {59, 104},
	  {60, 90},
	  {61, 27},
	  {62, 91},
	  {63, 88},
	  {64, 46},
	  {65, 41},
	  {66, 105},
	  {67, 52},
	  {68, 61},
	  {69, 88},
	  {70, 66},
	  {71, 94},
	  {72, 86},
	  {73, 31},
	  {74, 52},
	  {76, 69},
	  {77, 20},
	  {78, 104},
	  {79, 95},
	  {80, 86},
	  {81, 90},
	  {82, 106},
	  {83, 90},
	  {84, 85},
	  {85, 99},
	  {86, 105},
	  {87, 76},
	  {88, 69},
	  {89, 90},
	  {90, 90},
	  {91, 93},
	  {92, 102},
	  {93, 86},
	  {94, 61},
	  {95, 94},
	  {96, 99},
	  {97, 106},
	  {98, 87},
	  {99, 75},
	  {100, 95},
	  {102, 86},
	  {103, 38},
	  {104, 112},
	  {105, 97},
	  {106, 104},
	  {107, 114},
	  {108, 104},
	  {109, 100},
	  {110, 95},
	  {111, 102},
	  {112, 103},
	  {113, 74},
	  {114, 80},
	  {115, 106},
	  {116, 104},
	  {117, 113},
	  {118, 101},
	  {119, 100},
	  {120, 75},
	  {121, 118},
	  {122, 113},
	  {123, 110},
	  {124, 84},
	  {125, 98},
	  {126, 104},
	  {127, 90},
	  {128, 96},
	  {129, 59},
	  {130, 98},
	  {131, 75},
	  {132, 76},
	  {133, 71},
	  {134, 96},
	  {135, 90},
	  {136, 68},
	  {137, 87},
	  {138, 97},
	  {139, 62},
	  {140, 53},
	  {141, 86},
	  {142, 79},
	  {143, 66},
	  {144, 102},
	  {145, 75},
	  {146, 38},
	  {147, 96},
	  {148, 81},
	  {149, 101},
	  {150, 87},
	  {151, 61},
	  {152, 79},
	  {154, 73},
	  {155, 27},
	  {156, 98},
	  {157, 78},
	  {158, 72},
	  {159, 72},
	  {160, 98},
	  {161, 77},
	  {162, 77},
	  {163, 101},
	  {164, 93},
	  {165, 54},
	  {166, 47},
	  {167, 87},
	  {168, 77},
	  {169, 82},
	  {170, 96},
	  {171, 72},
	  {172, 44},
	  {173, 93},
	  {174, 87},
	  {175, 94},
	  {176, 85},
	  {177, 56},
	  {178, 82},
	  {180, 66},
	  {181, 29},
	  {182, 114},
	  {183, 75},
	  {184, 74},
	  {185, 70},
	  {186, 123},
	  {187, 73},
	  {188, 65},
	  {189, 87},
	  {190, 112},
	  {191, 52},
	  {192, 54},
	  {193, 72},
	  {194, 78},
	  {195, 71},
	  {196, 106},
	  {197, 70},
	  {198, 44},
	  {199, 86},
	  {200, 82},
	  {201, 99},
	  {202, 86},
	  {203, 55},
	  {204, 83},
	  {206, 80},
	  {207, 23},
	  {208, 91},
	  {209, 84},
	  {210, 102},
	  {211, 101},
	  {212, 100},
	  {213, 92},
	  {214, 96},
	  {215, 78},
	  {216, 61},
	  {217, 43},
	  {218, 84},
	  {219, 101},
	  {220, 101},
	  {221, 118},
	  {222, 99},
	  {223, 80},
	  {224, 54},
	  {225, 98},
	  {226, 111},
	  {227, 111},
	  {228, 75},
	  {229, 92},
	  {230, 78},
	  {231, 69},
	  {232, 36},
	  {233, 75},
	  {234, 69},
	  {238, 83},
	  {242, 41},
	  {248, 83},
	  {254, 81},
	  {260, 81},
	  {261, 64},
	  {262, 60},
	  {263, 55},
	  {264, 98},
	  {265, 66},
	  {266, 54},
	  {267, 77},
	  {268, 91},
	  {269, 41},
	  {270, 37},
	  {271, 70},
	  {272, 62},
	  {273, 87},
	  {274, 78},
	  {275, 60},
	  {276, 35},
	  {277, 58},
	  {278, 80},
	  {279, 78},
	  {280, 68},
	  {281, 41},
	  {282, 72},
	  {284, 67},
	  {285, 10},
	  {286, 103},
	  {287, 79},
	  {288, 75},
	  {289, 99},
	  {290, 108},
	  {291, 89},
	  {292, 70},
	  {293, 79},
	  {294, 104},
	  {295, 71},
	  {296, 78},
	  {297, 106},
	  {298, 82},
	  {299, 72},
	  {300, 102},
	  {301, 77},
	  {302, 47},
	  {303, 77},
	  {304, 89},
	  {305, 93},
	  {306, 85},
	  {307, 75},
	  {308, 82},
	  {310, 101},
	  {311, 35},
	  {312, 105},
	  {313, 86},
	  {314, 67},
	  {315, 64},
	  {316, 107},
	  {317, 74},
	  {318, 65},
	  {319, 79},
	  {320, 98},
	  {321, 50},
	  {322, 47},
	  {323, 68},
	  {324, 84},
	  {325, 73},
	  {326, 100},
	  {327, 91},
	  {328, 41},
	  {329, 78},
	  {330, 89},
	  {331, 89},
	  {332, 87},
	  {333, 52},
	  {334, 78},
	  {336, 90},
	  {337, 6},
	  {338, 103},
	  {339, 84},
	  {340, 101},
	  {341, 114},
	  {342, 107},
	  {343, 88},
	  {344, 110},
	  {345, 94},
	  {346, 101},
	  {347, 73},
	  {348, 84},
	  {349, 89},
	  {350, 83},
	  {351, 88},
	  {352, 107},
	  {353, 80},
	  {354, 68},
	  {355, 77},
	  {356, 101},
	  {357, 112},
	  {358, 83},
	  {359, 83},
	  {360, 91},
	  {361, 57},
	  {362, 88},
	  {363, 44},
	  {364, 91},
	  {365, 90},
	  {366, 91},
	  {367, 94},
	  {368, 82},
	  {369, 109},
	  {370, 85},
	  {371, 92},
	  {372, 92},
	  {373, 61},
	  {374, 90},
	  {375, 100},
	  {376, 105},
	  {377, 112},
	  {378, 101},
	  {379, 94},
	  {380, 57},
	  {381, 110},
	  {382, 101},
	  {383, 106},
	  {384, 112},
	  {385, 95},
	  {386, 103},
	  {387, 61},
	  {388, 83},
	  {389, 56},
	  {390, 97},
	  {391, 61},
	  {392, 57},
	  {393, 50},
	  {394, 101},
	  {395, 61},
	  {396, 42},
	  {397, 78},
	  {398, 92},
	  {399, 39},
	  {400, 41},
	  {401, 94},
	  {402, 60},
	  {403, 50},
	  {404, 97},
	  {405, 90},
	  {406, 29},
	  {407, 98},
	  {408, 80},
	  {409, 87},
	  {410, 83},
	  {411, 32},
	  {412, 67},
	  {414, 70},
	  {415, 6},
	  {416, 6},
	  {436, 89},
	  {438, 13},
	  {442, 106},
	  {443, 86},
	  {444, 90},
	  {445, 96},
	  {446, 115},
	  {447, 87},
	  {448, 85},
	  {449, 92},
	  {450, 106},
	  {451, 65},
	  {452, 81},
	  {453, 89},
	  {454, 94},
	  {455, 92},
	  {456, 107},
	  {457, 84},
	  {458, 56},
	  {459, 94},
	  {460, 103},
	  {461, 103},
	  {462, 91},
	  {463, 80},
	  {464, 90},
	  {465, 54},
	  {466, 96},
	  {467, 46},
	  {468, 108},
	  {469, 91},
	  {470, 95},
	  {471, 86},
	  {472, 109},
	  {473, 91},
	  {474, 82},
	  {475, 107},
	  {476, 105},
	  {477, 70},
	  {478, 84},
	  {479, 90},
	  {480, 93},
	  {481, 90},
	  {482, 106},
	  {483, 96},
	  {484, 71},
	  {485, 83},
	  {486, 105},
	  {487, 112},
	  {488, 96},
	  {489, 74},
	  {490, 97},
	  {491, 47},
	  {492, 80},
	  {493, 32},
	  {494, 106},
	  {495, 89},
	  {496, 88},
	  {497, 85},
	  {498, 109},
	  {499, 87},
	  {500, 77},
	  {501, 124},
	  {502, 109},
	  {503, 68},
	  {504, 71},
	  {505, 95},
	  {506, 89},
	  {507, 83},
	  {508, 113},
	  {509, 83},
	  {510, 57},
	  {511, 99},
	  {512, 100},
	  {513, 107},
	  {514, 95},
	  {515, 66},
	  {516, 99},
	  {518, 93},
	  {519, 56},
	  {520, 87},
	  {521, 82},
	  {522, 91},
	  {523, 85},
	  {524, 87},
	  {525, 74},
	  {526, 93},
	  {527, 71},
	  {528, 87},
	  {529, 49},
	  {530, 69},
	  {531, 99},
	  {532, 86},
	  {533, 100},
	  {534, 66},
	  {535, 91},
	  {536, 40},
	  {537, 102},
	  {538, 102},
	  {539, 103},
	  {540, 49},
	  {541, 60},
	  {542, 74},
	  {543, 58},
	  {544, 58},
	  {545, 65},
	  {546, 88},
	  {547, 45},
	  {548, 45},
	  {549, 44},
	  {550, 108},
	  {551, 43},
	  {552, 41},
	  {553, 55},
	  {554, 93},
	  {555, 23},
	  {556, 34},
	  {557, 56},
	  {558, 39},
	  {559, 63},
	  {560, 83},
	  {561, 42},
	  {562, 10},
	  {563, 64},
	  {564, 66},
	  {565, 56},
	  {566, 49},
	  {567, 28},
	  {568, 61},
	  {570, 57},
	  {572, 106},
	  {573, 66},
	  {574, 66},
	  {575, 70},
	  {576, 100},
	  {577, 66},
	  {578, 55},
	  {579, 105},
	  {580, 103},
	  {581, 45},
	  {582, 50},
	  {583, 71},
	  {584, 68},
	  {585, 87},
	  {586, 97},
	  {587, 61},
	  {588, 39},
	  {589, 76},
	  {590, 80},
	  {591, 80},
	  {592, 56},
	  {593, 51},
	  {594, 75},
	  {596, 64},
	  {597, 20},
	  {598, 69},
	  {599, 37},
	  {600, 75},
	  {601, 31},
	  {602, 69},
	  {603, 45},
	  {604, 16},
	  {605, 56},
	  {606, 71},
	  {607, 16},
	  {608, 16},
	  {609, 36},
	  {610, 45},
	  {611, 32},
	  {612, 52},
	  {613, 79},
	  {614, 36},
	  {615, 33},
	  {616, 44},
	  {617, 74},
	  {618, 46},
	  {619, 49},
	  {620, 47},
	  {621, 43},
	  {622, 38},
	  {624, 95},
	  {625, 85},
	  {626, 83},
	  {627, 83},
	  {628, 91},
	  {629, 83},
	  {630, 75},
	  {631, 88},
	  {632, 90},
	  {633, 60},
	  {634, 63},
	  {635, 80},
	  {636, 83},
	  {637, 76},
	  {638, 102},
	  {639, 80},
	  {640, 53},
	  {641, 79},
	  {642, 93},
	  {643, 96},
	  {644, 67},
	  {645, 62},
	  {646, 90},
	  {647, 20},
	  {648, 70},
	  {649, 36},
	  {650, 60},
	  {651, 29},
	  {652, 27},
	  {653, 35},
	  {654, 77},
	  {655, 25},
	  {656, 6},
	  {657, 51},
	  {658, 63},
	  {659, 13},
	  {660, 13},
	  {661, 52},
	  {662, 42},
	  {663, 33},
	  {664, 66},
	  {665, 19},
	  {666, 6},
	  {667, 23},
	  {668, 30},
	  {669, 35},
	  {670, 50},
	  {671, 25},
	  {672, 40},
	  {674, 45},
	  {675, 55}
	};
		
	std::array<int, 26 * 26 * 26> tri {};
	std::array<int, 26 * 26 * 26 * 26> tetra {};
	std::array<int, 26 * 26 * 26 * 26 * 26> penta {};
	
	double GetLetterFrequency(char c)
	{
		return expectedLetters[c];
	}
	
	int GetBigramFrequency(int gram)
	{
		return expectedBigrams[gram];
	}
	
	void PopulateNGrams(string filename, StringToIntMap& m)
	{
		ifstream ifs(filename);
		string line;
		while (getline(ifs, line))
		{
			istringstream iss(line);
			int n;
			string s;
			iss >> s >> n;
			m[s] = n;
		}
	}
	
	void Populate(string filename, int* array)
	{
		ifstream ifs(filename);
		string line;
		while (getline(ifs, line))
		{
			istringstream iss(line);
			int idx;
			int n;
			iss >> idx >> n;
			array[idx] = n;
		}
	}
	
	int GetTri(int gram)
	{		
		return tri[gram];
	}
	
	int GetTetra(int gram)
	{
		return tetra[gram];
	}
	
	int GetPenta(int gram)
	{
		return penta[gram];
	}
	
	void Initialize()
	{		
		Populate("data/trigrams.txt", &tri[0]);
		Populate("data/tetragrams.txt", &tetra[0]);
		Populate("data/pentagrams.txt", &penta[0]);
	}
}
